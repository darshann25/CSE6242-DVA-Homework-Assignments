-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
    id INTEGER,
    name TEXT,
    score INTEGER
);

CREATE TABLE movie_cast (
    movie_id INTEGER,
    cast_id INTEGER,
    cast_name TEXT
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.mode csv
.import ./movie-name-score.txt movies
.import ./movie-cast.txt movie_cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index
ON movies (score);

CREATE INDEX cast_index
ON movie_cast (cast_id);

CREATE INDEX movie_index
ON movies (id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

SELECT 
    (COUNT(*) / 500.0) * 100 AS PROP
FROM movies
WHERE score > 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT
    id,
    name,
    score
FROM movies
ORDER BY score DESC, name ASC
LIMIT 7;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT
    cast_id,
    cast_name,
    COUNT(movie_id) AS movie_count
FROM movie_cast
GROUP BY cast_id, cast_name
ORDER BY movie_count DESC, cast_name ASC
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT
    cast_id,
    cast_name,
    AVG(score) AS average_score
FROM movie_cast a
INNER JOIN movies b
ON a.movie_id == b.id
WHERE b.score > 50
GROUP BY cast_id, cast_name
HAVING COUNT(b.id) > 2
ORDER BY movie_score DESC, cast_name ASC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
SELECT
    a.cast_id as cast_member_id1,
    b.cast_id as cast_member_id2,
    COUNT(c.id) as movie_count,
    AVG(c.score) as average_movie_score
FROM movie_cast a
INNER JOIN movie_cast b
ON a.movie_id == b.movie_id
INNER JOIN movies c
ON a.movie_id == c.id
GROUP BY cast_member_id1, cast_member_id2
HAVING movie_count >= 3 AND average_movie_score >= 40 AND cast_member_id1 < cast_member_id2 AND cast_member_id1 <> cast_member_id2
ORDER BY movie_count DESC, average_movie_score DESC, cast_member_id1 ASC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT
    cast_id AS cast_id,
    cast_name AS cast_name,
    AVG(average_movie_score) AS collaboration_score
FROM
(SELECT cast_id, cast_name, average_movie_score FROM movie_cast a INNER JOIN good_collaboration b ON a.cast_id == b.cast_member_id1
UNION
SELECT cast_id, cast_name, average_movie_score FROM movie_cast a INNER JOIN good_collaboration b ON a.cast_id == b.cast_member_id2)
GROUP BY cast_id
ORDER BY collaboration_score DESC, cast_name ASC
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts4(
    id INTEGER NOT NULL,
    name TEXT NOT NULL,
    year INTEGER NOT NULL,
    overview TEXT NOT NULL,
    popularity DECIMAL NOT NULL
);

.mode csv
.import ./movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT
    COUNT(*) AS count_overview
FROM movie_overview
WHERE overview MATCH 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT
    id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --